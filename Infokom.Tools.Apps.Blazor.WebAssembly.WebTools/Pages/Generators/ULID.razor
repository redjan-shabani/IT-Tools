@page "/Generators/ULID"


<center><h3>ULID Generator</h3></center>
<hr class="divider w-25" />
<p>Generate random Universally Unique Lexicographically Sortable Identifier (ULID).</p>


<Card>
	<CardHeader>
		<div class="d-flex justify-content-between">
			<div class="d-flex gap-3 align-items-center">
				<CheckboxInput Label="Quotes" @bind-Value="Quotes"></CheckboxInput>
				<CheckboxInput Label="Commas" @bind-Value="Commas"></CheckboxInput>
			</div>
			<div class="d-flex gap-3 align-items-center">
				<label class="col-form-label">Count</label>
				<NumberInput TValue="int" Placeholder="Input how many records you want to generate (1-2000)!" Min="1" Max="1000" @bind-Value="Count" />
			</div>
		</div>
	</CardHeader>
	<CardBody>
		<TextAreaInput Style="font-family: monospace; text-align: center;" Rows="12" Cols="70" @bind-Value="ResultText"></TextAreaInput>
	</CardBody>
	<CardFooter>
		<div class="d-flex flex-nowrap justify-content-center gap-5">
			<Button Style="width:150px" Color="ButtonColor.Primary" TooltipTitle="Copy to clipboard!" TooltipPlacement="TooltipPlacement.Right" @onclick="Copy">
				<Icon Name="IconName.Copy" Size="IconSize.x5"></Icon>
				Copy
			</Button>
			<Button Style="width:150px" Color="ButtonColor.Primary" @onclick="Generate">
				<Icon Name="IconName.ArrowClockwise" Size="IconSize.x5"></Icon>
				Refresh
			</Button>
		</div>
	</CardFooter>
</Card>

@code {
	[Inject]
	private IJSRuntime JSRuntime { get; set; }

	private int Count { get; set; } = 10;
	private bool Quotes { get; set; }
	private bool Commas { get; set; }



	private List<string> ResultItems { get; set; } = new List<string>();

	private string ResultText { get; set; } = string.Empty;

	protected override void OnInitialized()
	{
		base.OnInitialized();

		this.Generate();
	}

	private void Generate()
	{
		this.ResultText = string.Empty;

		this.ResultItems.Clear();

		foreach (var item in Enumerable.Range(0, Count).Select(_ => Generators.GenerateULID()))
		{
			this.ResultItems.Add(Quotes ? $"\"{item}\"" : item);
		}

		this.ResultText = string.Join(Commas ? ",\n" : "\n", this.ResultItems);
	}

	private async Task Copy()
	{
		await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", this.ResultText);
	}
}