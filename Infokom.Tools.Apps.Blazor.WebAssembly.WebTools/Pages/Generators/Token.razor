@page "/Generators/Token"

@inject IJSRuntime JSRuntime


<center><h3>Token Generator</h3></center>
<hr class="divider w-25" />
<p>
	Generate random string with the chars you want, uppercase or lowercase letters, numbers and/or symbols.
</p>

<Card>
	<CardHeader>
		<div class="d-flex justify-content-between">
			
			<div class="d-flex gap-3 align-items-center">
				<CheckboxInput Label="Uppercase (ABC...)" @bind-Value="Uppercase" />
				<CheckboxInput Label="Lowercase (abc...)" @bind-Value="Lowercase" />
				<CheckboxInput Label="Numbers (123...)" @bind-Value="Numbers" />
				<CheckboxInput Label="Symbols (!-;...)" @bind-Value="Symbols" />
			</div>
			<div class="d-flex gap-3 align-items-center">
				<label class="col-form-label">Count</label>
				<NumberInput TValue="int" Placeholder="Input how many records you want to generate (1-2000)!" Min="1" Max="1000" @bind-Value="Count" />
			</div>
		</div>
	</CardHeader>
	<CardBody>
		<TextAreaInput Style="font-family: monospace; text-align: center;" Rows="12" Cols="80" @bind-Value="TextResult"></TextAreaInput>
	</CardBody>
	<CardFooter>
		<div class="d-flex flex-nowrap justify-content-center gap-5">
			<Button Style="width:150px" Color="ButtonColor.Primary" TooltipTitle="Copy to clipboard!" TooltipPlacement="TooltipPlacement.Right" @onclick="Copy">
				<Icon Name="IconName.Copy" Size="IconSize.x5"></Icon>
				Copy
			</Button>
			<Button Style="width:150px" Color="ButtonColor.Primary" @onclick="Generate">
				<Icon Name="IconName.ArrowClockwise" Size="IconSize.x5"></Icon>
				Refresh
			</Button>
		</div>
	</CardFooter>
</Card>

@code {

	private int Count { get; set; } = 10;

	private bool Uppercase { get; set; } = true;
	private bool Lowercase { get; set; } = true;
	private bool Numbers { get; set; } = true;
	private bool Symbols { get; set; } = false;
	private int Length { get; set; } = 64;

	private bool Loading { get; set; }

	private List<string> Result { get; set; } = new List<string>();

	private string TextResult { get; set; } = string.Empty;

	private async Task Generate()
	{
		this.Loading = true;

		this.Result.Clear();

		this.TextResult = string.Empty;

		await Task.Run(() =>
		{
			try
			{
				for (int i = 0; i < Count; i++)
				{
					var token = TokenTools.GenerateToken(this.Uppercase, this.Lowercase, this.Numbers, this.Symbols, this.Length);

					this.Result.Add(token);
				}

				this.TextResult = string.Join("\n", this.Result);
			}
			finally
			{
				this.Loading = false;
			}
		});
	}

	private async Task Copy()
	{
		await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", TextResult);
	}
}

